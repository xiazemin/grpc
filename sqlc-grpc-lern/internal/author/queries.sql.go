// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package author

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :exec
INSERT INTO authors (
  name, bio, size
) VALUES (
  ?,?,?
)
`

type CreateAuthorParams struct {
	Name string

	Bio sql.NullString

	Size sql.NullInt64
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) error {

	createAuthor := createAuthor

	_, err := q.db.ExecContext(ctx, createAuthor, arg.Name, arg.Bio, arg.Size)
	return err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {

	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio, company_id, size, empty_col, default_col, size1, default_col1, type, type1 FROM authors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {

	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CompanyID,
		&i.Size,
		&i.EmptyCol,
		&i.DefaultCol,
		&i.Size1,
		&i.DefaultCol1,
		&i.Type,
		&i.Type1,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, company_id, size, empty_col, default_col, size1, default_col1, type, type1 FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {

	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
			&i.Size,
			&i.EmptyCol,
			&i.DefaultCol,
			&i.Size1,
			&i.DefaultCol1,
			&i.Type,
			&i.Type1,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
